import Sims.*
import Abrazos.*
import EstadoDeAnimo.*

object fixture
{
	method unSimInteresado()
	{
		return new SimInteresado()
	}
	
	method unSimBuenazo()
	{
		return new SimBuenazo()
	}
	
	method unAbrazoComun()
	{
		return new AbrazoComun()
	}
	
	method unAbrazoProlongado()
	{
		return new AbrazoProlongado()
	}
}

object helper
{
	method hizoUnAmigoYLaFelicidadAumento(sim, otroSim)
	{
		var felicidadSim 		    = sim.nivelFelicidad()
		var valoracionSim			= otroSim.valoracion(sim)
		
		sim.hacerAmigo(otroSim)
		
		return (sim.nivelFelicidad() == felicidadSim + valoracionSim)
	}
	
	method hizoUnAmigoYFormaParteDeSuListaDeAmigos(sim, otroSim)
	{
		sim.hacerAmigo(otroSim)
		return (sim.amigos().any({amigo => amigo == otroSim}) )
	}
}

test "Un sim se hace amigo de otro y aumenta su felicidad respecto a la valoracion del otro" 
{
	var sim 					= new SimInteresado()
	var nuevoAmigo 				= new SimInteresado()
	
	assert.that(helper.hizoUnAmigoYLaFelicidadAumento(sim, nuevoAmigo))
}

test "Un sim se hace amigo de otro y pasa a formar parte de su lista de amigos" 
{
	var sim 					= new SimInteresado()
	var nuevoAmigo 				= new SimInteresado()
	
	assert.that(helper.hizoUnAmigoYFormaParteDeSuListaDeAmigos(sim, nuevoAmigo))
}

test "Un sim se acuerda del orden en que se hizo amigos ." 
{
	var sim 					= new SimInteresado()
	var nuevoAmigo 				= new SimInteresado()
	var nuevoAmigo2				= new SimInteresado()
	
	
	sim.hacerAmigo(nuevoAmigo)
	sim.hacerAmigo(nuevoAmigo2)
	assert.that(sim.amigos() == [nuevoAmigo,nuevoAmigo2])
}

test "Dos sims se hacen amigos mutuamente y la felicidad de ambos aumenta" 
{
	var sim 	= new SimInteresado()
	var otroSim = new SimInteresado()

	assert.that
	(
		helper.hizoUnAmigoYLaFelicidadAumento(sim,otroSim) 
		&& helper.hizoUnAmigoYLaFelicidadAumento(otroSim, sim)
	)			
}

test "Dos sims se hacen amigos mutuamente y ambos estan en la lista de amigos del otro" 
{
	var sim 	= new SimInteresado()
	var otroSim = new SimInteresado()

	assert.that
	(
		helper.hizoUnAmigoYFormaParteDeSuListaDeAmigos(sim,otroSim) 
		&& helper.hizoUnAmigoYFormaParteDeSuListaDeAmigos(otroSim, sim)
	)			
}

test "Saber si un sim es amigo de otro (siendolo) ." 
{
 var sim        = fixture.unSimInteresado()
 var amigo      = fixture.unSimInteresado()
 
 assert.that(helper.hizoUnAmigoYFormaParteDeSuListaDeAmigos(sim, amigo))


}
test "Saber si un sim es amigo de otro (sin serlo) ." 
{
 var sim        = fixture.unSimInteresado()
 var amigo      = fixture.unSimInteresado()
 
 
 assert.that(!(sim.amigos().any({amigoa => amigoa == amigo})))
 }

